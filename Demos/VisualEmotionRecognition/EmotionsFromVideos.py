import modelLoader
import modelDictionary
import imageProcessingUtil
import GUIController
import numpy
import os
import cv2
import PerceptionGWR


def createPlot(arousal, valence, left):
    import matplotlib.pyplot as plt

    plt.scatter(arousal, valence, color='r')
    plt.xlim(-1, 1)
    plt.ylim(-1, 1)
    plt.xlabel('Arousal')
    plt.ylabel('Valence')
    if left:
        plt.savefig("/home/pablo/Documents/datasets/ChefsHat/ChefsHat_PilotVideos_Recordings1/Pilot 2 videos/CAM 2/tmp_left.png")
    else:
        plt.savefig(
            "/home/pablo/Documents/datasets/ChefsHat/ChefsHat_PilotVideos_Recordings1/Pilot 2 videos/CAM 2/tmp_right.png")



finalImageSizeLeft = (1664,1079) # Size of the final image generated by the demo
finalImageSizeRight = (1535,1079) # Size of the final image generated by the demo
faceDetectionMaximumFrequency = 10 # Frequency that a face will be detected: every X frames.
faceSize = (64,64) # Input size for both models: categorical and dimensional

modelDimensional = modelLoader.modelLoader(modelDictionary.DimensionalModel)

imageProcessing = imageProcessingUtil.imageProcessingUtil(faceDetectionMaximumFrequency)

GUIController = GUIController.GUIController()



framesFolder = "/home/pablo/Documents/datasets/ChefsHat/ChefsHat_PilotVideos_Recordings1/Pilot 2 videos/CAM 2/frames/"
saveInLeft = "/home/pablo/Documents/datasets/ChefsHat/ChefsHat_PilotVideos_Recordings1/Pilot 2 videos/CAM 2/recognizedFrame_Left"
saveInRight = "/home/pablo/Documents/datasets/ChefsHat/ChefsHat_PilotVideos_Recordings1/Pilot 2 videos/CAM 2/recognizedFrame_right"

testImage = "/home/pablo/Documents/datasets/ChefsHat/ChefsHat_PilotVideos_Recordings1/Pilot 2 videos/CAM 2/test.png"

testImage = cv2.imread(testImage)

#gwrModel = PerceptionGWR.Vision_PerceptionGWR_Dimensional_AffectNet()

arousalLeft = []
valenceLeft = []

arousalRight = []
valenceRight = []

createPlot(arousalLeft, valenceLeft, False)
createPlot(arousalLeft, valenceLeft, True)

framesList = os.listdir(framesFolder)
dataList = sorted(framesList, key=lambda x: int(x.split(".")[0]))


for frames in dataList:
    #frameLeft = cv2.imread(framesFolder+"/"+frames)[0:-1, 0:1024]
    frameRight = cv2.imread(framesFolder+"/"+frames)[0:-1, 1024:-1]


    # facePoints, face = imageProcessing.detectFace(frameLeft)
    #
    # image = numpy.zeros((finalImageSizeLeft[1], finalImageSizeLeft[0], 3), numpy.uint8)
    # image[0:1079, 0:1024] = frameLeft
    #
    #
    # if not len(face) == 0:
    #     print("Processing face")
    #     face = imageProcessing.preProcess(face, faceSize)
    #     print("Dimensional value")
    #     dimensionalRecognition = modelDimensional.classify(face)
    #     arousalLeft.append(dimensionalRecognition[0])
    #     valenceLeft.append(dimensionalRecognition[1])
    #     createPlot(arousalLeft, valenceLeft, True)
    #
    #
    # plotImage = cv2.imread(
    #     "/home/pablo/Documents/datasets/ChefsHat/ChefsHat_PilotVideos_Recordings1/Pilot 2 videos/CAM 2/tmp_left.png")
    # image[0:480, 1023:-1] = plotImage
    #         # print("Plot image:", plotImage.shape)
    #         # input()
    # frameLeft = image
    # cv2.imwrite(saveInLeft+"/"+frames, frameLeft)


    facePoints, face = imageProcessing.detectFace(frameRight)

    image = numpy.zeros((finalImageSizeRight[1], finalImageSizeRight[0], 3), numpy.uint8)
    image[0:1079, 0:895] = frameRight
    frameRight = image

    frameRight = GUIController.createDetectedFacGUI(frameRight, facePoints, None,
                                               [])

    if not len(face) == 0:
        print("Processing face")
        face = imageProcessing.preProcess(face, faceSize)
        print("Dimensional value")
        dimensionalRecognition = modelDimensional.classify(face)
        arousalRight.append(dimensionalRecognition[0])
        valenceRight.append(dimensionalRecognition[1])
        createPlot(arousalRight, valenceRight, False)

    plotImage = cv2.imread(
        "/home/pablo/Documents/datasets/ChefsHat/ChefsHat_PilotVideos_Recordings1/Pilot 2 videos/CAM 2/tmp_right.png")
    #print ("Plot shape:", plotImage.shape)
    #input()
    image[0:480, 894:-1] = plotImage
    frameRight = image
    # print("Plot image:", plotImage.shape)
    # input()

    cv2.imwrite(saveInRight + "/" + frames, frameRight)



